Computer software is a program that enables a computer to perform a specific task, as opposed to the physical components of the system (hardware). This includes application software such as a word processor, which enables a user to perform a task, and system software such as an operating system, which enables other software to run properly, by interfacing with hardware and with other software. 
The term "software" was first used in this sense by John W. Tukey in 1957. In computer science and software engineering, computer software is all computer programs. The concept of reading different sequences of instructions into the memory of a device to control computations was invented by Charles Babbage as part of his difference engine. The theory that is the basis for most modern software was first proposed by Alan Turing in his 1935 essay, Computable Numbers with an Application to the Entscheidungsproblem.
Computer software is so called in contrast to computer hardware, which encompasses the physical interconnections and devices required to store and execute (or run) the software. In computers, software is loaded into random access memory (RAM) and executed in the central processing unit. At the lowest level, software consists of a machine language specific to an individual processor. The machine language consists of groups of binary values signifying processor instructions (object code), which change the state of the computer from its preceding state. 
Software is an ordered sequence of instructions for changing the state of the computer hardware in a particular sequence. It is usually written in high-level programming languages that are easier and more efficient for humans to use (closer to natural language) than machine language. High-level languages are compiled or interpreted into machine language object code. Software may also be written in an assembly language, essentially, a mnemonic representation of a machine language using a natural language alphabet. Assembly language must be assembled into object code via an assembler. 

Relationship to data
Software has historically been considered an intermediary between electronic hardware and data, which are defined by the instructions defined by the software. As computational math becomes increasingly complex, the distinction between software and data becomes less precise. Data has generally been considered as either the output or input of executed software. However, data is not the only possible output or input. For example, (system) configuration information may also be considered input, although not necessarily considered data (and certainly not applications data). The output of a particular piece of executed software may be the input for another executed piece of software. Therefore, software may be considered an interface between hardware, data, and/or (other) software. 
Types
Practical computer systems divide software into three major classes: System software, programming software, and application software, although the distinction is arbitrary and often blurred. 
System software helps run the computer hardware and computer system. It includes operating systems, device drivers, diagnostic tools, servers, windowing systems, utilities, and more. The purpose of systems software is to insulate the applications programmer as much as possible from the details of the particular computer complex being used, especially memory and other hardware features, and such accessory devices as communications, printers, readers, displays, keyboards, etc.
Programming software usually provides tools to assist a programmer in writing computer programs and software using different programming languages in a more convenient way. The tools include text editors, compilers, interpreters, linkers, debuggers, and so on. An Integrated development environment (IDE) merges those tools into a software bundle, and a programmer may not need to type multiple commands for compiling, interpreter, debugging, tracing, and etc., because the IDE usually has an advanced graphical user interface (GUI).
Application software allows humans to accomplish one or more specific (non-computer related) tasks. Typical applications include industrial automation, business software, educational software, medical software, databases, and computer games. Businesses are probably the biggest users of application software, but almost every field of human activity now uses some form of application software. It is used to automate all sorts of functions.
Computer viruses
Computer viruses are a malignant type of computer program even though they might not be considered software. They can be created as any of the three types of software. Some viruses cause minor problems, such as slowing down a computer or using email to spread. Other viruses can cause more serious problems, such as destroying data or damaging hardware. 
Program and library
A program may not be sufficiently complete for execution by a computer. In particular, it may require additional software from a software library to be complete. Such a library may include software components used by stand-alone programs, but which cannot be executed on their own. Thus, programs may include standard routines that are common to many programs, extracted from these libraries. Libraries may also include stand-alone programs that are activated by some computer event and/or perform some function (such as computer "housekeeping") but do not return data to their activating program. Programs may be called by other programs and/or may call other programs. 
Three layers
Users often see things differently than programmers. People who use modern general purpose computers (as opposed to embedded systems, analog computers, supercomputers, and so forth) usually see three layers of software performing a variety of tasks: Platform, application, and user software. 
Platform software: Platform includes the basic input-output system (often described as firmware rather than software), device drivers, an operating system, and typically a graphical user interface which, in total, allow a user to interact with the computer and its peripherals (associated equipment). Platform software often comes bundled with the computer, and users may not realize that it exists or that they have a choice to use different platform software.
Application software: Application software or simply, "Applications" are what most people think of when they think of software. Typical examples include office suites and video games. Application software is often purchased separately from computer hardware. Sometimes applications are bundled with the computer, but that does not change the fact that they run as independent applications. Applications are almost always independent programs from the operating system, though they are often tailored for specific platforms. Most users think of compilers, databases, and other "system software" as applications.
User-written software: User software tailors systems to meet the users specific needs. User software include spreadsheet templates, word processor macros, scientific simulations, graphics and animation scripts. Even email filters are a kind of user software. Users create this software themselves and often overlook how important it is. Depending on how competently the user-written software has been integrated into purchased application packages, many users may not be aware of the distinction between the purchased packages, and what has been added by fellow co-workers.
Operation
Computer software has to be "loaded" into the computer's storage (also known as memory and RAM). 
Once the software is loaded, the computer is able to execute the software. Computers operate by executing the computer program. This involves passing instructions from the application software, through the system software, to the hardware which ultimately receives the instruction as machine code. Each instruction causes the computer to carry out an operation—moving data, carrying out a computation, or altering the control flow of instructions. 
Data movement is typically from one place in memory to another. Sometimes it involves moving data between memory and registers which enable high-speed data access in the CPU. 
A simple example of the way software operates is what happens when a user selects an entry such as "Copy" from a menu. In this case, a conditional instruction is executed to copy text from data in a "document" area residing in memory, perhaps to an intermediate storage area known as a "clipboard" data area. If a different menu entry such as "Paste" is chosen, the software may execute the instructions to copy the text from the clipboard data area to a specific location in the same or another document in memory. 

Currently, almost the only limitations on the use of computer software in applications is the ingenuity of the designer/programmer. Consequently, large areas of activities (such as playing grand master level chess) formerly assumed to be impossible if done by software simulation are now routinely programmed. The only area that has so far proved reasonably secure from software simulation is the realm of human art—especially, pleasing music and literature. 
Quality and reliability
Software reliability considers the errors, faults, and failures related to the creation and operation of software. A lot of the quality and reliability of a program has to do with the Application software being written for a specific System software. One example is that an application for an older System software may not work on a newer one. 
Software architecture
The software architecture of a system comprises its software components, their external properties, and their relationships with one another. The term also refers to documentation of a system's software architecture.[2] 
History
The origins of software architecture as a concept were first identified in the research work of Edsger Dijkstra in 1968, and David Parnas in the early 1970s. The scientists emphasized that the structure of a software system matters and getting the structure right is critical.[3] The study of the field increased in popularity since the early 1990s, with research work concentrating on architectural styles (patterns), architecture description languages, architecture documentation, and formal methods.[4] 
Mary Shaw and David Garlan of Carnegie Mellon wrote a book titled, Software Architecture: Perspectives on an Emerging Discipline in 1996, which brought forward the concepts in Software Architecture, such as components, connectors, styles, and so on. UCI's Institute for Software Research's efforts in software architecture research is directed primarily in architectural styles, architecture description languages, and dynamic architectures. 
Describing architectures
Architecture description languages
Architecture Description Languages (ADLs) are used to describe a Software Architecture. Several different ADLs have been developed by different organizations, including Wright (developed by Carnegie Mellon), Acme (developed by Carnegie Mellon), xADL (developed by UCI), Darwin (developed by Imperial College London), and DAOP-ADL (developed by University of Málaga). Common elements of an ADL are component, connector and configuration. 
Views
Software architecture is commonly organized in views,[5] which are analogous to the different types of blueprints made in building architecture. 
License
Software license gives the user the right to use the software in the licensed environment, some software comes with the license when purchased off the shelf, or OEM license when bundled with hardware. Software can also be in the form of freeware or shareware. 
Proprietary software
Proprietary software is software that has restrictions on using and copying it, usually enforced by a proprietor. The prevention of use, copying, or modification can be achieved by legal or technical means. Technical means include releasing machine-readable binaries only, and withholding the human-readable source code. Legal means can involve software licensing, copyright, and patent law. Proprietary software can be sold for money as commercial software or available at zero-price as freeware. The monopoly provided by proprietary software allows a distributor of commercial copies to charge any price for those copies. Distributors of proprietary software have more control over what users can do with the software than nonproprietary software. 
Free software
Free software, as defined by the Free Software Foundation, is software which can be used, copied, studied, modified, and redistributed without restriction. Freedom from such restrictions is central to the concept, with the opposite of free software being proprietary software (a distinction unrelated to whether a fee is charged). The usual way for software to be distributed as free software is for the software to be licensed to the recipient with a free software license (or be in the public domain), and the source code of the software to be made available (for a compiled language). Most free software is distributed online without charge, or off-line at the marginal cost of distribution, but this is not required, and people may sell copies for any price. 
To help distinguish libre (freedom) software from gratis (zero price) software, Richard Stallman, founder of the free software movement, developed the following explanation: "Free software is a matter of liberty, not price. To understand the concept, you should think of 'free' as in 'free speech', not as in 'free beer.'" More specifically, free software means that computer users have the freedom to cooperate with whom they choose, and to control the software they use. 
